"""Components for running parts of hh-suite."""
from phyre_engine.component import Component
import phyre_engine.tools.hhsuite.tool as tools
import phyre_engine.tools.hhsuite.parser as parser
from tempfile import NamedTemporaryFile
import Bio.SeqIO

class HHBlits(Component):
    """Build an MSA from a query sequence using hhblits.

    :param str database: Path to an hhblits database.
    :param \\**args: Extra arguments to pass to hhblits.

    .. seealso::
        - :class:`phyre_engine.tools.hhsuite.HHBlits`:
            Class responsible for actually running hhblits.
    """

    #: :param sequence: Input sequence to hhblits.
    #: :type sequence: :class:`Bio.SeqRecord`
    REQUIRED = ['sequence']
    #: :param profile_msa: File name of profile MSA (in a3m format).
    #: :type profile_msa: str
    ADDS     = ['profile_msa']
    REMOVES  = []

    def __init__(self, database, **args):
        """Create a new component for running hhblits."""
        self._database = database
        self._args = args

    def run(self, data):
        """Build a sequence profile using hhblits.

        Reads a single sequence from the file with the path given by input.
        If the file can not be read or contains multiple sequences an exception
        will be thrown.

        :param dict data: Key-value mapping of data.

        :returns:
            Key-value mapping of data with a ``profile_msa`` attribute added
            containing the file name of the MSA generated by hhblits.
        """

        #Write the query sequence to a temporary file and run hhblits
        sequence = self.get_vals(data)
        with NamedTemporaryFile(suffix=".fasta") as query_file:
            msa_name = "query.a3m"
            Bio.SeqIO.write(sequence, query_file.name, "fasta")
            hhblits = tools.HHBlits(
                    database=self._database, input=query_file.name,
                    output="report.hhr", oa3m=msa_name,
                    **self._args)
            hhblits.run()
            data["profile_msa"] = msa_name
            return data

class HHSearch(Component):
    """Search a profile MSA against an hhsearch library.

    :param str database: Path to an hhsearch database.
    :param \\**args: Extra arguments to pass to hhsearch.

    .. seealso::
        :class:`phyre_engine.tools.hhsuite.HHSearch`: Class responsible for
            actually running hhsearch.
    """

    #: :param str profile_msa: File name of an MSA in a format understood by
    #:      hhsearch.
    REQUIRED = ['profile_msa']
    #: :param str hhsearch_atab:
    #:     File name of a file containing all alignments in tabular format
    #:     (``-atab`` option of hhsearch).
    #: :param str hhseearch_report:
    #:     File name of the hhsearch report file (``-o`` option of hhsearch).
    ADDS     = ['hhsearch_atab', 'hhsearch_report']
    REMOVES  = []

    def __init__(self, database, **args):
        """Create a new component for running hhsearch."""
        self._database = database
        self._args = args

    def run(self, data):
        """Search a sequence profile against an hhsearch database.

        This component will not parse the output files.
        """

        profile_msa = self.get_vals(data)
        atab_name = "hhsearch.atab"
        report_name = "hhsearch.hhr"
        hhsearch = tools.HHSearch(
                database=self._database, input=profile_msa,
                output=report_name, atab=atab_name,
                **self._args)
        hhsearch.run()
        data["hhsearch_atab"] = atab_name
        data["hhsearch_report"] = report_name
        return data

class ReportParser(Component):
    """Parse hhsearch reports."""


    #: :param str hhsearch_atab: Location of a file produced by the ``-atab``
    #:      option of hhsearch.
    #: :param str hhsearch_report: Location of a report file produced by
    #:      hhsearch(``-o`` option).
    REQUIRED = ["hhsearch_atab", "hhsearch_report"]
    #: :param hits: Hits parsed from report.
    #: :type hits: List of :class:`phyre_engine.tools.hhsuite.parser.Hit`
    #:      objects.
    ADDS = ["hits"]
    REMOVES = []

    def run(self, data):
        """Parse report file and atab file into an array of hits."""

        atab_file, report_file = self.get_vals(data)

        #Parse report files to get hits, then combine the hits so that we have
        #the summary information and alignments in the same hit.
        report = parser.Report(report_file)
        atab   = parser.Tabular(atab_file)
        hits = []
        for r, a in zip(report.hits, atab.hits):
            hit = parser.Hit()
            hit.info = r.info
            hit.aln  = a.aln
            hits.append(hit)

        data["hits"] = hits
        return data
